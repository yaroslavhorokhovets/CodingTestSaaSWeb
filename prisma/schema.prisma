// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum MedicalSpecialty {
  GENERAL_PRACTICE
  CARDIOLOGY
  DERMATOLOGY
  NEUROLOGY
  PSYCHIATRY
  PEDIATRICS
  GYNECOLOGY
  ORTHOPEDICS
  RADIOLOGY
  ANESTHESIOLOGY
  EMERGENCY_MEDICINE
  INTERNAL_MEDICINE
  SURGERY
  ONCOLOGY
  ENDOCRINOLOGY
}

enum UserRole {
  DOCTOR
  ADMIN
  SUPER_ADMIN
}

enum ConsultationStatus {
  DRAFT
  IN_PROGRESS
  TRANSCRIBING
  PROCESSING
  COMPLETED
  ARCHIVED
}

enum DocumentType {
  PRESCRIPTION
  LETTER
  REPORT
  REFERRAL
  CERTIFICATE
}

enum ExportFormat {
  PDF
  CSV
  FHIR
}

model User {
  id                String            @id @default(cuid())
  email             String            @unique
  password          String
  firstName         String
  lastName          String
  medicalSpecialty  MedicalSpecialty
  organization      String?
  phone             String?
  role              UserRole          @default(DOCTOR)
  emailVerified     Boolean           @default(false)
  otpCode           String?
  otpExpiry         DateTime?
  resetToken        String?
  resetTokenExpiry  DateTime?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  consultations     Consultation[]
  documents         Document[]
  exports           Export[]
  auditLogs         AuditLog[]

  @@map("users")
}

model Patient {
  id                String            @id @default(cuid())
  firstName         String
  lastName          String
  dateOfBirth       DateTime?
  email             String?
  phone             String?
  address           String?
  medicalHistory    String?
  allergies         String?
  medications       String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  consultations     Consultation[]

  @@map("patients")
}

model Consultation {
  id                String            @id @default(cuid())
  title             String
  status            ConsultationStatus @default(DRAFT)
  transcription     String?
  soapNotes         Json?             // SOAP notes structure
  dapNotes          Json?             // DAP notes structure
  medicalCoding     Json?             // Medical coding suggestions
  audioFileUrl      String?
  duration          Int?              // Duration in seconds
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  userId            String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  patientId         String?
  patient           Patient?          @relation(fields: [patientId], references: [id], onDelete: SetNull)
  documents         Document[]
  exports           Export[]

  @@map("consultations")
}

model Document {
  id                String            @id @default(cuid())
  title             String
  content           String
  type              DocumentType
  isSigned          Boolean           @default(false)
  signedAt          DateTime?
  templateUsed      String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  userId            String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  consultationId    String?
  consultation      Consultation?     @relation(fields: [consultationId], references: [id], onDelete: SetNull)
  exports           Export[]

  @@map("documents")
}

model Export {
  id                String            @id @default(cuid())
  fileName          String
  format            ExportFormat
  fileUrl           String?
  fileSize          Int?
  status            String            @default("PENDING") // PENDING, COMPLETED, FAILED
  metadata          Json?             // Export metadata
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // Relations
  userId            String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  consultationId    String?
  consultation      Consultation?     @relation(fields: [consultationId], references: [id], onDelete: SetNull)
  documentId        String?
  document          Document?         @relation(fields: [documentId], references: [id], onDelete: SetNull)

  @@map("exports")
}

model AuditLog {
  id                String            @id @default(cuid())
  action            String            // CREATE, READ, UPDATE, DELETE, EXPORT, etc.
  resource          String            // User, Consultation, Document, etc.
  resourceId        String?
  details           Json?             // Additional details
  ipAddress         String?
  userAgent         String?
  createdAt         DateTime          @default(now())

  // Relations
  userId            String
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}